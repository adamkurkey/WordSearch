package assignment1WordSearch;

public class ExcessSampleCode {

	// Current working main. Break in to bits
	
	package assignment1WordSearch;

	import java.util.*;

	public class TestWordSearchMain {

	    public static void main(String[] args) {

	        System.out.printf("Hello and welcome!\n");
	        System.out.println("Enter words to be placed in the word search. 5 words, please.");

	        Scanner scanner = new Scanner(System.in);
	        String line = "";
	        List<String> userWords = new ArrayList<>();

	        // Collect user input
	        for (int i = 1; i <= 5; i++) {
	            System.out.print("Word " + i + ": ");
	            line = scanner.nextLine().trim();
	            userWords.add(line.toUpperCase());
	        } // end for 1-5

	        // create a 12x18 grid
	        char[][] grid = new char[12][18];

	        

	        // Fill all of the cells with random letters
	        for (int i = 0; i < grid.length; i++) {
	            for (int j = 0; j < grid[i].length; j++) {
	                // Generate a random uppercase letter
	                grid[i][j] = (char) ('A' + (int) (Math.random() * 26));
	            } // end inner for
	        } // end outer for

	        // Put user words in the first 5 rows of the grid
	        for (int i = 0; i < 5; i++) {
	            String word = userWords.get(i);
	            for (int j = 0; j < word.length(); j++) {
	                grid[i][j] = word.charAt(j);
	            } // end inner for
	        } // end outer for
	        
	        // Print the grid
	        for (int i = 0; i < grid.length; i++) {
	            for (int j = 0; j < grid[i].length; j++) {
	                System.out.print(grid[i][j] + " ");
	            } // end inner for
	            System.out.println();
	        } // end outer for
	        
	        scanner.close();
	    }
	}


	
	
	
	
	
	
	
	
	
	// From Main
	//import java.util.*;

	//public class TestWordSearchMain {
	//
//		public static void main(String[] args) {
//			// TODO Auto-generated method stub
	//
	//
////			        ManagerWordSearch manager = new ManagerWordSearch();
////			        manager.runWordSearch();
////			    }
////			}
//			
////			public static void testFillGrid() {
////		        // Code to test WordSearch fillGrid() method
////		    }
	////
////		    public static void testPlaceWords() {
////		        // Code to test WordSearch placeWords() method
////		    }
	////
////		    public static void testCreateWordSearch() {
////		        // Code to test WordSearchManager createWordSearch() method
////		    }
	////
////		    public static void testDisplayPuzzle() {
////		        // Code to test WordSearchManager displayPuzzle() method
////		    }
//			
//			System.out.printf("Hello and welcome!\n");
//	        System.out.println("Enter words to be placed in the word \nsearch. 5 words please.");
	//
//	        Scanner scanner = new Scanner(System.in);
//	        // initialize variable 'line' to hold user input
//	        String line = "";
//	        List<String> userWords = new ArrayList<>();
//	        while (!(line = scanner.nextLine().trim()).isEmpty()) {
//	            userWords.add(line.toUpperCase());
//	        } // end while
//	        
//	        // Print out the Word, number, and the word, so user knows what they've chosen
//	        for (int i = 1; i <= 5; i++) {
//	            System.out.println("Word " + i + ":");
//	        } // end for 1-5
//	        System.out.println();
//	        char[][] grid = new char[12][18];
	//
//	        // Fill the grid with random letters
//	        for (int i = 0; i < grid.length; i++) {
//	            for (int j = 0; j < grid[i].length; j++) {
//	                // Generate a random uppercase letter
//	                grid[i][j] = (char)('A' + (int)(Math.random() * 26));
//	            } // end inner for
//	        } // end outer for
	//
//	        for (int i = 0; i < grid.length; i++) {
//	            for (int j = 0; j < grid[i].length; j++) {
//	                System.out.print(grid[i][j] + " ");
//	            } // end inner for
//	            System.out.println();
//	        } // end outer for
//			
//		} // end main
	//
	//} // end TestWordSearchMain
	
	
	
	public void generate() {
	    Scanner scanner = new Scanner(System.in);
	    
	    System.out.print("Enter your choice (1: User input, 2: Pre-defined words): ");
	    int choice = scanner.nextInt();
	    scanner.nextLine(); // Consume the newline character
	    
	    switch (choice) {
	        case 1:
	            generateWithUserInput(scanner);
	            break;
	        case 2:
	            autoGenerated();
	            break;
	        default:
	            System.out.println("Invalid choice. Generating with user input.");
	            generateWithUserInput(scanner);
	            break;
	    }
	    
	    scanner.close();
	}

	private void generateWithUserInput(Scanner scanner) {
	    System.out.print("Enter the number of words: ");
	    int numWords = scanner.nextInt();
	    scanner.nextLine(); // Consume the newline character
	    
	    words.clear();
	    
	    for (int i = 0; i < numWords; i++) {
	        System.out.print("Enter word " + (i + 1) + ": ");
	        String word = scanner.nextLine();
	        words.add(word.toUpperCase());
	    }
	    
	    wordSearch.fillGrid();
	    wordSearch.placeWords();
	}

	private void autoGenerated() {
	    words.clear();
	    words.add("PROGRAM");
	    words.add("ARRAY");
	    words.add("DIMENSION");
	    words.add("THUNDER");
	    words.add("SUNNY");
	    
	    wordSearch.fillGrid();
	    wordSearch.placeWords();
	}
	
	
	List<String> userWords = new ArrayList<>();
	
	 // Collect user input
    for (int i = 1; i <= 5; i++) {
        System.out.print("Word " + i + ": ");
        String line = scanner.nextLine().trim();
        userWords.add(line.toUpperCase());
        
        wordSearch.fillGrid();
        wordSearch.placeWords();
        wordSearch.printPuzzle();

        scanner.close();
    }    
	// From Manager
	
//    public void runWordSearch() {
//    Scanner scanner = new Scanner(System.in);
//
//    while (true) {
//        System.out.println("Choose an option:");
//        System.out.println("G - Generate a new puzzle");
//        System.out.println("P - Print the puzzle");
//        System.out.println("S - Show the solution");
//        String option = scanner.nextLine().trim().toUpperCase();
//
//        if (option.equals("G")) {
//            /* get words from user 
//             * fill grid with random chars
//             * place the words
//             * print the puzzle
//             * wordSearch.generatePuzzle();
//            wordSearch.placeWords();
//            wordSearch.printPuzzle();
//            */
//        } else if (option.equals("P")) {
//        	// if they haven't made a puzzle, have them make a puzzle
//            if (wordSearch.getWords().isEmpty()) {
//                System.out.println("No puzzle available. Generate a puzzle first.");
//                continue;
//            } // have a pre-made puzzle 
//            wordSearch.printPuzzle();
//        } else if (option.equals("S")) {
//            // Code to print the solution
//        } else {
//            System.out.println("Invalid option. Retry.");
//            continue;
//        }
//
//        System.out.println("Do you want to continue? (Y/N)");
//        String continueOption = scanner.nextLine().trim().toUpperCase();
//        if (!continueOption.equals("Y")) {
//            break;
//        }
//    }
//}
//
	
	
	
	// From Object
	
	 // get words from the user
	  
	
    
//	// Prompt the user to enter words
//	System.out.println("Enter words to add to the word search, one per line:");
//	Scanner scanner = new Scanner(System.in);
//	String line = "";
//	List<String> words = new ArrayList<>();
//		while (!(line = scanner.nextLine().trim()).isEmpty()) {
//			words.add(line.toUpperCase());
//		}
//} // end getWords
//
//// Fill the grid with the words
//for (String word : words) {
//    // Generate a random orientation (horizontal, vertical, or diagonal)
//    int orientation = (int)(Math.random() * 3);
//
//    // Generate a random starting position
//    int row = (int)(Math.random() * (grid.length - word.length()));
//    int col = (int)(Math.random() * (grid[0].length - word.length()));
//
//    // Fill the word in the grid
//    for (int i = 0; i < word.length(); i++) {
//        char c = word.charAt(i);
//        if (orientation == 0) { // horizontal
//            grid[row][col + i] = c;
//        } else if (orientation == 1) { // vertical
//            grid[row + i][col] = c;
//        } else { // diagonal
//            grid[row + i][col + i] = c;
//        }
//    }
//}
	// method to generate the puzzle
    public void generatePuzzle() {
    	
    }
	
    public void generate() {
        Scanner scanner = new Scanner(System.in);
        
        int numRows;
        int numColumns;
        
        while (true) {
        	System.out.print("Enter the number of rows (between 10 and 50):");
        	numRows = scanner.nextInt();
        	if (numRows >= 10 && numRows <=50) {
        		break; // valid input, leave loop
        	} else {
        		System.out.println("Invalid input. Please enter a number between 10 and 50.");
        	} // end else
        } // end while rows
        
        while (true) {
        	System.out.print("Enter the number of columns (between 10 and 50):");
        	numColumns = scanner.nextInt();
        	if (numColumns >= 10 && numColumns <=50) {
        		break; // valid input, leave loop
        	} else {
        		System.out.println("Invalid input. Please enter a number between 10 and 50.");
        	} // end else
        } // end while
        
        // Prompt user for self made or auto generated puzzle
        System.out.print("Enter your choice (1: User input, 2: Pre-defined words): ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        
        switch (choice) {
            case 1:
                generateWithUserInput(scanner);
                break;
            case 2:
                autoGenerated();
                break;
            default:
                System.out.println("Invalid choice. Generating with user input.");
                generateWithUserInput(scanner);
                break;
        } // end switch choice
        
        scanner.close();
    }
	
    System.out.print("Enter your choice (1: User input, 2: Pre-defined words): ");
    int choice = scanner.nextInt();
    scanner.nextLine(); // Consume the newline character
    
    switch (choice) {
        case 1:
            generateWithUserInput(scanner);
            break;
        case 2:
            autoGenerated();
            break;
        default:
            System.out.println("Invalid choice. Generating with user input.");
            generateWithUserInput(scanner);
            break;
    } // end switch choice
    
    scanner.close();
}

void generateWithUserInput(Scanner scanner) {
    System.out.print("Enter how many words you want to input: ");
    int numWords;
    while (true) {
    	String input = scanner.nextLine(); // Consume the newline character
    	try {
    		numWords = Integer.parseInt(input);
    		if (numWords > 0) {
    			break; // valid input, exit loop
    		} else {
    			System.out.println("Number of words must be more than 0. Try again.");
    		}
    	} catch (NumberFormatException e) {
    		System.out.println("Invalid input. Please enter a numeric value");
    	}
    } // end while
    words.clear();
    
    for (int i = 0; i < numWords; i++) {
        System.out.print("Enter word " + (i + 1) + ": ");
        String word = scanner.nextLine();
        if (word.trim().isEmpty()) {
        	System.out.println("Empty word is not allowed. Please enter a valid word");
        	i--; // Decrement i to repeat the current iteration
        	continue; // Skip adding the empty word to the list
        }
        words.add(word.toUpperCase());
    }

//    fillGrid();
//    placeWords();
//    printPuzzle();
} // end generate with user input method

private void autoGenerated() {
    words.clear();
    words.add("PROGRAM");
    words.add("ARRAY");
    words.add("DIMENSION");
    words.add("THUNDER");
    words.add("SUNNY");
    
//    fillGrid();
//    placeWords();
}
	
}
